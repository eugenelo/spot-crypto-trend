load("@pip_deps//:requirements.bzl", "requirement")
load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_library", "py_test")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@rules_oci//oci:defs.bzl", "oci_tarball", "oci_push")
load("//:py_layer.bzl", "py_oci_image")

py_library(
    name = "data",
    srcs = [
        "src/data/constants.py",
        "src/data/utils.py",
    ],
    imports = ["src"],
    deps = [
        requirement("ccxt"),
        requirement("numpy"),
        requirement("pandas"),
        requirement("pytz"),
        requirement("polars"),
    ],
    visibility = ["//visibility:public"]
)

py_binary(
    name="combine_ohlc",
    srcs = [
        "src/data/combine_ohlc.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("pandas"),
        requirement("polars"),
        requirement("tqdm"),
        ":data",
        "//logging_custom:logging_custom",
    ],
)

py_binary(
    name="tick_to_ohlc",
    srcs = [
        "src/data/tick_to_ohlc.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("pandas"),
        requirement("polars"),
        requirement("tqdm"),
        ":data",
        "//logging_custom:logging_custom",
    ],
)

py_binary(
    name="fix_write_stamp_alignment",
    srcs = [
        "src/data/fix_write_stamp_alignment.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("pandas"),
        requirement("tqdm"),
        ":data",
        "//logging_custom:logging_custom",
    ],
)

py_binary(
    name="fetch_kraken_tick_data",
    srcs = [
        "src/data/fetch_kraken_tick_data.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("ccxt"),
        requirement("pytz"),
        requirement("tqdm"),
        ":data",
        "//ccxt_custom:ccxt_custom",
        "//logging_custom:logging_custom",
    ],
)

py_binary(
    name="fetch_kraken_ohlcv_data",
    srcs = [
        "src/data/fetch_kraken_ohlcv_data.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("google-cloud-logging"),
        requirement("ccxt"),
        requirement("pytz"),
        requirement("tqdm"),
        ":data",
        "//ccxt_custom:ccxt_custom",
        "//logging_custom:logging_custom",
    ],
)

py_binary(
    name="convert_kraken_symbols",
    srcs = [
        "src/data/convert_kraken_symbols.py",
    ],
    data = [
        "//logging_custom:config",
    ],
    deps = [
        requirement("ccxt"),
        requirement("pytz"),
        ":data",
        "//logging_custom:logging_custom",
    ],
)

py_test(
    name="test_utils",
    srcs = ["test/test_utils.py"],
    deps = [
        requirement("numpy"),
        requirement("pandas"),
        ":data",
    ],
    size="small",
)


#  Construct an image that has three layers.
#  The result will look like this:
#     bazel run //data:tarball
#
# 2f2353bd5bea: Loading layer [==================================================>]  47.13MB/47.13MB
# f02532d45017: Loading layer [==================================================>]   3.62MB/3.62MB
# 9296e9071c11: Loading layer [==================================================>]  16.24kB/16.24kB
py_oci_image(
    name = "image",
    base = "@ubuntu",
    binary = "fetch_kraken_ohlcv_data",
    entrypoint = ["/data/fetch_kraken_ohlcv_data"],
)
platform(
    name = "aarch64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)
platform(
    name = "x86_64_linux",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)
platform_transition_filegroup(
    name = "platform_image",
    srcs = [":image"],
    target_platform = select({
        "@platforms//cpu:arm64": ":aarch64_linux",
        "@platforms//cpu:x86_64": ":x86_64_linux",
    }),
)
#  $ bazel run //data:tarball
#  $ docker run --rm eugenelo/spot-crypto-trend:fetch-ohlcv
oci_tarball(
    name = "tarball",
    format = "docker",
    image = ":platform_image",
    repo_tags = ["eugenelo/spot-crypto-trend:fetch-ohlcv"],
)

#  $ bazel run //data:publish
oci_push(
    name = "publish",
    image = ":platform_image",
    repository = "eugenelo/spot-crypto-trend",
    remote_tags = ["fetch-ohlcv"],
)
